{"version":3,"sources":["modules/DownloadTask.tsx","modules/RenderTaskList.tsx","App.tsx","index.tsx"],"names":["DownloadTask","setButtonText","getTask","buttonText","useState","buttonDisable","setButtonDisable","type","disabled","onClick","RenderTaskList","tasks","users","map","task","user","find","person","id","userId","key","className","checked","completed","readOnly","title","toUpperCase","slice","name","App","setTasks","setUsers","isDataDownloaded","setDataDownloaded","Promise","all","fetch","then","res1","res2","json","data1","data2","data","catch","document","location","reload","ReactDOM","render","getElementById"],"mappings":"mMAGaA,G,KAAe,SAAC,GAIA,IAH3BC,EAG0B,EAH1BA,cACAC,EAE0B,EAF1BA,QACAC,EAC0B,EAD1BA,WAC0B,EACgBC,oBAAS,GADzB,mBACnBC,EADmB,KACJC,EADI,KAG1B,OACE,4BACEC,KAAK,SACLC,SAAUH,EACVI,QACE,WACEH,GAAiB,GACjBL,EAAc,WACdC,MAIHC,KCnBMO,EAAiB,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,MACtC,OACE,4BAEKD,EAAiBE,KAAI,SAACC,GACrB,IAAMC,EAAcH,EAAMI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOJ,EAAKK,UAE5D,OACE,wBAAIC,IAAKN,EAAKI,GAAIG,UAAU,QAC1B,yBAAKA,UAAU,aACb,2BACEd,KAAK,WACLe,QAASR,EAAKS,UACdC,UAAQ,IAEV,uBAAGH,UAAU,QACVP,EAAKW,MAAM,GAAGC,cAAgBZ,EAAKW,MAAME,MAAM,KAGpD,6BACE,uBAAGN,UAAU,QACVN,EAAKa,aC4BTC,EA5CH,WAAO,IAAD,EACUzB,mBAAS,IADnB,mBACTO,EADS,KACFmB,EADE,OAEU1B,mBAAS,IAFnB,mBAETQ,EAFS,KAEFmB,EAFE,OAG8B3B,oBAAS,GAHvC,mBAGT4B,EAHS,KAGSC,EAHT,OAIoB7B,mBAAS,kBAJ7B,mBAITD,EAJS,KAIGF,EAJH,KAoBhB,OAAK+B,EAYDA,EAEA,kBAAC,EAAD,CACErB,MAAOA,EACPC,MAAOA,IAKN,KAnBH,oCACE,kBAAC,EAAD,CACEX,cAAeA,EACfC,QAnBR,WACE,OAAOgC,QAAQC,IAAI,CACjBC,MAXY,2CAYZA,MAXY,6CAaXC,MAAK,mCAAEC,EAAF,KAAQC,EAAR,YAAkBL,QAAQC,IAAI,CAACG,EAAKE,OAAQD,EAAKC,YACtDH,MAAK,YAAqB,IAAD,mBAAlBI,EAAkB,KAAXC,EAAW,KACxBZ,EAASW,EAAME,MACfZ,EAASW,EAAMC,MACfV,GAAkB,MAEnBW,OAAM,kBAAMC,SAASC,SAASC,QAAO,OASlC5C,WAAYA,MC9BtB6C,IAASC,OACP,kBAAC,EAAD,MACAJ,SAASK,eAAe,U","file":"static/js/main.18eafaed.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DownloadTaskElements } from './interfaces';\n\nexport const DownloadTask = ({\n  setButtonText,\n  getTask,\n  buttonText,\n}: DownloadTaskElements) => {\n  const [buttonDisable, setButtonDisable] = useState(false);\n\n  return (\n    <button\n      type=\"button\"\n      disabled={buttonDisable}\n      onClick={\n        () => {\n          setButtonDisable(true);\n          setButtonText('Loading');\n          getTask();\n        }\n      }\n    >\n      {buttonText}\n    </button>\n  );\n};\n","import React from 'react';\nimport { DownloadRenderTaskList, Task, User } from './interfaces';\n\nexport const RenderTaskList = ({ tasks, users }: DownloadRenderTaskList) => {\n  return (\n    <ul>\n      {\n        (tasks as Task[]).map((task: Task) => {\n          const user: User = (users.find(person => person.id === task.userId)) as User;\n\n          return (\n            <li key={task.id} className=\"list\">\n              <div className=\"task-zone\">\n                <input\n                  type=\"checkbox\"\n                  checked={task.completed}\n                  readOnly\n                />\n                <p className=\"task\">\n                  {task.title[0].toUpperCase() + task.title.slice(1)}\n                </p>\n              </div>\n              <div>\n                <p className=\"name\">\n                  {user.name}\n                </p>\n              </div>\n            </li>\n          );\n        })\n      }\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { DownloadTask } from './modules/DownloadTask';\nimport { RenderTaskList } from './modules/RenderTaskList';\n\nconst tasksLink = 'https://mate.academy/students-api/todos';\nconst usersLink = 'https://mate.academy/students-api/users';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [isDataDownloaded, setDataDownloaded] = useState(false);\n  const [buttonText, setButtonText] = useState('Download tasks');\n\n  function getTask(): Promise<void> {\n    return Promise.all([\n      fetch(tasksLink),\n      fetch(usersLink),\n    ])\n      .then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\n      .then(([data1, data2]) => {\n        setTasks(data1.data);\n        setUsers(data2.data);\n        setDataDownloaded(true);\n      })\n      .catch(() => document.location.reload(true));\n  }\n\n  if (!isDataDownloaded) {\n    return (\n      <>\n        <DownloadTask\n          setButtonText={setButtonText}\n          getTask={getTask}\n          buttonText={buttonText}\n        />\n      </>\n    );\n  }\n\n  if (isDataDownloaded) {\n    return (\n      <RenderTaskList\n        tasks={tasks}\n        users={users}\n      />\n    );\n  }\n\n  return null;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}