{"version":3,"sources":["modules/DownloadTask.tsx","modules/RenderTaskList.tsx","App.tsx","index.tsx"],"names":["DownloadTask","setButtonText","getData","buttonText","useState","buttonDisable","setButtonDisable","type","disabled","onClick","RenderTaskList","prepared","map","task","key","id","className","checked","completed","readOnly","title","toUpperCase","slice","user","name","tasksLink","usersLink","App","setPrepared","isDataDownloaded","setDataDownloaded","fetchData","url","a","fetch","data","json","response","tasks","users","find","person","userId","sorting","sortType","sort","b","localeCompare","ReactDOM","render","document","getElementById"],"mappings":"iSAGaA,G,MAAe,SAAC,GAIA,IAH3BC,EAG0B,EAH1BA,cACAC,EAE0B,EAF1BA,QACAC,EAC0B,EAD1BA,WAC0B,EACgBC,oBAAS,GADzB,mBACnBC,EADmB,KACJC,EADI,KAG1B,OACE,4BACEC,KAAK,SACLC,SAAUH,EACVI,QACE,WACEH,GAAiB,GACjBL,EAAc,WACdC,MAIHC,KCfMO,EAAiB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAC/B,OACE,oCACE,4BAEIA,EAASC,KAAI,SAACC,GACZ,OACE,wBAAIC,IAAKD,EAAKE,GAAIC,UAAU,QAC1B,yBAAKA,UAAU,aACb,2BACET,KAAK,WACLU,QAASJ,EAAKK,UACdC,UAAQ,IAEV,uBAAGH,UAAU,QACVH,EAAKO,MAAM,GAAGC,cAAgBR,EAAKO,MAAME,MAAM,KAGpD,6BACE,uBAAGN,UAAU,QACVH,EAAKU,KAAKC,cCrBzBC,EAAY,qCACZC,EAAY,qCA+HHC,EA7HH,WAAO,IAAD,EACgBvB,mBAAqB,IADrC,mBACTO,EADS,KACCiB,EADD,OAE8BxB,oBAAS,GAFvC,mBAETyB,EAFS,KAESC,EAFT,OAGoB1B,mBAAS,kBAH7B,mBAGTD,EAHS,KAGGF,EAHH,cAKD8B,EALC,8EAKhB,WAA4BC,GAA5B,iBAAAC,EAAA,sEACqBC,MAAMF,GAD3B,cACQG,EADR,gBAEyBA,EAAKC,OAF9B,cAEQC,EAFR,yBAISA,EAASF,MAJlB,4CALgB,kEAYhB,8BAAAF,EAAA,sEACsBF,EAAkBN,GADxC,cACQa,EADR,gBAEsBP,EAAkBL,GAFxC,OAEQa,EAFR,OAIEX,EACEU,EAAM1B,KAAI,SAACC,GACT,OAAO,2BACFA,GADL,IAEEU,KAAMgB,EAAMC,MAAK,SAAAC,GAAM,OAAIA,EAAO1B,KAAOF,EAAK6B,gBAKpDZ,GAAkB,GAbpB,4CAZgB,sBA4BhB,IAAMa,EAAU,SAACC,GACf,OAAQA,GACN,IAAK,QACH,OAAOhB,EAAY,YACZjB,EACFkC,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEb,MAAM2B,cAAcD,EAAE1B,YAI9C,IAAK,YACH,OAAOQ,EAAY,YACZjB,EACFkC,MAAK,SAACZ,EAAGa,GACR,OAAoB,IAAhBb,EAAEf,YAAsC,IAAhB4B,EAAE5B,WACpB,GAGU,IAAhB4B,EAAE5B,YAAsC,IAAhBe,EAAEf,UACrB,EAGF,OAKf,IAAK,WAEH,OAAOU,EAAY,YACZjB,EACFkC,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEV,KAAKC,KAAKuB,cAAcD,EAAEvB,KAAKC,WAIvD,QACE,OAAO,OAIb,OAAKK,EAYDA,EAEA,oCACE,4BACEtB,KAAK,SACLE,QACE,WACEkC,EAAQ,WAJd,YAWA,4BACEpC,KAAK,SACLE,QACE,WACEkC,EAAQ,eAJd,gBAWA,4BACEpC,KAAK,SACLE,QACE,WACEkC,EAAQ,cAJd,gBAWA,kBAAC,EAAD,CACEhC,SAAUA,KAMX,KArDH,oCACE,kBAAC,EAAD,CACEV,cAAeA,EACfC,QAxEQ,2CAyERC,WAAYA,MC9EtB6C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.98434518.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DownloadTaskElements } from './interfaces';\n\nexport const DownloadTask = ({\n  setButtonText,\n  getData,\n  buttonText,\n}: DownloadTaskElements) => {\n  const [buttonDisable, setButtonDisable] = useState(false);\n\n  return (\n    <button\n      type=\"button\"\n      disabled={buttonDisable}\n      onClick={\n        () => {\n          setButtonDisable(true);\n          setButtonText('Loading');\n          getData();\n        }\n      }\n    >\n      {buttonText}\n    </button>\n  );\n};\n","import React from 'react';\nimport { Prepared } from './interfaces';\n\ntype RenderTaskListProps = {\n  prepared: Prepared[];\n};\n\nexport const RenderTaskList = ({ prepared }: RenderTaskListProps) => {\n  return (\n    <>\n      <ul>\n        {\n          prepared.map((task: Prepared) => {\n            return (\n              <li key={task.id} className=\"list\">\n                <div className=\"task-zone\">\n                  <input\n                    type=\"checkbox\"\n                    checked={task.completed}\n                    readOnly\n                  />\n                  <p className=\"task\">\n                    {task.title[0].toUpperCase() + task.title.slice(1)}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"name\">\n                    {task.user.name}\n                  </p>\n                </div>\n              </li>\n            );\n          })\n        }\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { DownloadTask } from './modules/DownloadTask';\nimport { RenderTaskList } from './modules/RenderTaskList';\nimport { Prepared, User, Task } from './modules/interfaces';\n\nconst tasksLink = 'https://mate.academy/students-api/';\nconst usersLink = 'https://mate.academy/students-api/';\n\nconst App = () => {\n  const [prepared, setPrepared] = useState<Prepared[]>([]);\n  const [isDataDownloaded, setDataDownloaded] = useState(false);\n  const [buttonText, setButtonText] = useState('Download tasks');\n\n  async function fetchData<T>(url: string): Promise<T> {\n    const data = await fetch(url);\n    const response = await data.json();\n\n    return response.data;\n  }\n\n  async function getData() {\n    const tasks = await fetchData<Task[]>(tasksLink);\n    const users = await fetchData<User[]>(usersLink);\n\n    setPrepared(\n      tasks.map((task) => {\n        return {\n          ...task,\n          user: users.find(person => person.id === task.userId),\n        } as Prepared;\n      }),\n    );\n\n    setDataDownloaded(true);\n  }\n\n  const sorting = (sortType: string) => {\n    switch (sortType) {\n      case 'title':\n        return setPrepared(\n          [...(prepared as Prepared[])\n            .sort((a, b) => a.title.localeCompare(b.title)),\n          ],\n        );\n\n      case 'completed':\n        return setPrepared(\n          [...(prepared as Prepared[])\n            .sort((a, b) => {\n              if (a.completed === true && b.completed === false) {\n                return -1;\n              }\n\n              if (b.completed === true && a.completed === false) {\n                return 1;\n              }\n\n              return 0;\n            }),\n          ],\n        );\n\n      case 'userName':\n\n        return setPrepared(\n          [...(prepared as Prepared[])\n            .sort((a, b) => a.user.name.localeCompare(b.user.name)),\n          ],\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isDataDownloaded) {\n    return (\n      <>\n        <DownloadTask\n          setButtonText={setButtonText}\n          getData={getData}\n          buttonText={buttonText}\n        />\n      </>\n    );\n  }\n\n  if (isDataDownloaded) {\n    return (\n      <>\n        <button\n          type=\"button\"\n          onClick={\n            () => {\n              sorting('title');\n            }\n          }\n        >\n          By title\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={\n            () => {\n              sorting('completed');\n            }\n          }\n        >\n          By completed\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={\n            () => {\n              sorting('userName');\n            }\n          }\n        >\n          By User Name\n        </button>\n\n        <RenderTaskList\n          prepared={prepared}\n        />\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}