{"version":3,"sources":["modules/DownloadTask.tsx","modules/fetchData.tsx","modules/RenderTaskList.tsx","App.tsx","index.tsx"],"names":["DownloadTask","setButtonText","getData","buttonText","useState","buttonDisable","setButtonDisable","type","disabled","onClick","fetchData","urlUnit","a","fetch","data","json","response","RenderTaskList","preparedTasks","map","task","key","id","className","checked","completed","readOnly","title","toUpperCase","slice","user","name","App","setPreparedTasks","isLoaded","setLoaded","tasks","users","find","person","userId","sorting","sortType","sort","b","localeCompare","ReactDOM","render","document","getElementById"],"mappings":"iSAQaA,G,MAAe,SAAC,GAIH,IAHxBC,EAGuB,EAHvBA,cACAC,EAEuB,EAFvBA,QACAC,EACuB,EADvBA,WACuB,EACmBC,oBAAS,GAD5B,mBAChBC,EADgB,KACDC,EADC,KAGvB,OACE,4BACEC,KAAK,SACLC,SAAUH,EACVI,QACE,WACEH,GAAiB,GACjBL,EAAc,WACdC,MAIHC,KC3BA,SAAeO,EAAtB,kC,4CAAO,WAA4BC,GAA5B,iBAAAC,EAAA,4DACO,qCADP,SAEcC,MAAM,GAAD,OADZ,sCACY,OAAUF,IAF7B,cAECG,EAFD,gBAGkBA,EAAKC,OAHvB,cAGCC,EAHD,yBAKEA,EAASF,MALX,4C,sBCOA,IAAMG,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OAC5B,4BAEIA,EAAcC,KAAI,SAAAC,GAAI,OACpB,wBAAIC,IAAKD,EAAKE,GAAIC,UAAU,QAC1B,yBAAKA,UAAU,aACb,2BACEhB,KAAK,WACLiB,QAASJ,EAAKK,UACdC,UAAQ,IAEV,uBAAGH,UAAU,QACVH,EAAKO,MAAM,GAAGC,cAAgBR,EAAKO,MAAME,MAAM,KAGpD,6BACE,uBAAGN,UAAU,QACVH,EAAKU,KAAKC,aCmFVC,EApGH,WAAO,IAAD,EAC0B5B,mBAA0B,IADpD,mBACTc,EADS,KACMe,EADN,OAEc7B,oBAAS,GAFvB,mBAET8B,EAFS,KAECC,EAFD,OAGoB/B,mBAAS,kBAH7B,mBAGTD,EAHS,KAGGF,EAHH,iDAKhB,8BAAAW,EAAA,sEACsBF,EAAkB,SADxC,cACQ0B,EADR,gBAEsB1B,EAAkB,SAFxC,OAEQ2B,EAFR,OAIEJ,EACEG,EAAMjB,KAAI,SAAAC,GAAI,kCACTA,GADS,IAEZU,KAAMO,EAAMC,MAAK,SAAAC,GAAM,OAAIA,EAAOjB,KAAOF,EAAKoB,gBAIlDL,GAAU,GAXZ,4CALgB,sBAmBhB,IAAMM,EAAU,SAACC,GACf,OAAQA,GACN,IAAK,QACH,OAAOT,EAAiB,YAClBf,EAAcyB,MAAK,SAAC/B,EAAGgC,GAAJ,OAAUhC,EAAEe,MAAMkB,cAAcD,EAAEjB,YAI7D,IAAK,YACH,OAAOM,EAAiB,YAClBf,EAAcyB,MAAK,SAAC/B,EAAGgC,GACzB,OAAoB,IAAhBhC,EAAEa,YAAsC,IAAhBmB,EAAEnB,WACpB,GAGU,IAAhBmB,EAAEnB,YAAsC,IAAhBb,EAAEa,UACrB,EAGF,OAKb,IAAK,WAEH,OAAOQ,EAAiB,YAClBf,EAAcyB,MAAK,SAAC/B,EAAGgC,GAAJ,OAAUhC,EAAEkB,KAAKC,KAAKc,cAAcD,EAAEd,KAAKC,WAGtE,QACE,OAAO,OAIb,OAAKG,EAYDA,EAEA,oCACE,4BACE3B,KAAK,SACLE,QAAS,kBAAMgC,EAAQ,WAFzB,YAOA,4BACElC,KAAK,SACLE,QAAS,kBAAMgC,EAAQ,eAFzB,gBAOA,4BACElC,KAAK,SACLE,QAAS,kBAAMgC,EAAQ,cAFzB,gBAOA,kBAAC,EAAD,CACEvB,cAAeA,KAMhB,KAzCH,oCACE,kBAAC,EAAD,CACEjB,cAAeA,EACfC,QA3DQ,2CA4DRC,WAAYA,MC/DtB2C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.fd8102eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface DownloadTaskProps {\n  setButtonText: Function;\n  getData: Function;\n  buttonText: string;\n}\n\nexport const DownloadTask = ({\n  setButtonText,\n  getData,\n  buttonText,\n}: DownloadTaskProps) => {\n  const [buttonDisable, setButtonDisable] = useState(false);\n\n  return (\n    <button\n      type=\"button\"\n      disabled={buttonDisable}\n      onClick={\n        () => {\n          setButtonDisable(true);\n          setButtonText('Loading');\n          getData();\n        }\n      }\n    >\n      {buttonText}\n    </button>\n  );\n};\n","export async function fetchData<T>(urlUnit: string): Promise<T> {\n  const URL = 'https://mate.academy/students-api/';\n  const data = await fetch(`${URL}${urlUnit}`);\n  const response = await data.json();\n\n  return response.data;\n}\n","import React from 'react';\nimport { PreparedTasks } from './interfaces';\n\ntype RenderTaskListProps = {\n  preparedTasks: PreparedTasks[];\n};\n\nexport const RenderTaskList = ({ preparedTasks }: RenderTaskListProps) => (\n  <ul>\n    {\n      preparedTasks.map(task => (\n        <li key={task.id} className=\"list\">\n          <div className=\"task-zone\">\n            <input\n              type=\"checkbox\"\n              checked={task.completed}\n              readOnly\n            />\n            <p className=\"task\">\n              {task.title[0].toUpperCase() + task.title.slice(1)}\n            </p>\n          </div>\n          <div>\n            <p className=\"name\">\n              {task.user.name}\n            </p>\n          </div>\n        </li>\n      ))\n    }\n  </ul>\n);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { DownloadTask } from './modules/DownloadTask';\nimport { fetchData } from './modules/fetchData';\nimport { RenderTaskList } from './modules/RenderTaskList';\nimport { PreparedTasks, User, Task } from './modules/interfaces';\n\nconst App = () => {\n  const [preparedTasks, setPreparedTasks] = useState<PreparedTasks[]>([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [buttonText, setButtonText] = useState('Download tasks');\n\n  async function getData() {\n    const tasks = await fetchData<Task[]>('todos');\n    const users = await fetchData<User[]>('users');\n\n    setPreparedTasks(\n      tasks.map(task => ({\n        ...task,\n        user: users.find(person => person.id === task.userId),\n      }) as PreparedTasks),\n    );\n\n    setLoaded(true);\n  }\n\n  const sorting = (sortType: string) => {\n    switch (sortType) {\n      case 'title':\n        return setPreparedTasks(\n          [...preparedTasks.sort((a, b) => a.title.localeCompare(b.title)),\n          ],\n        );\n\n      case 'completed':\n        return setPreparedTasks(\n          [...preparedTasks.sort((a, b) => {\n            if (a.completed === true && b.completed === false) {\n              return -1;\n            }\n\n            if (b.completed === true && a.completed === false) {\n              return 1;\n            }\n\n            return 0;\n          }),\n          ],\n        );\n\n      case 'userName':\n\n        return setPreparedTasks(\n          [...preparedTasks.sort((a, b) => a.user.name.localeCompare(b.user.name))],\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isLoaded) {\n    return (\n      <>\n        <DownloadTask\n          setButtonText={setButtonText}\n          getData={getData}\n          buttonText={buttonText}\n        />\n      </>\n    );\n  }\n\n  if (isLoaded) {\n    return (\n      <>\n        <button\n          type=\"button\"\n          onClick={() => sorting('title')}\n        >\n          By title\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => sorting('completed')}\n        >\n          By completed\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => sorting('userName')}\n        >\n          By User Name\n        </button>\n\n        <RenderTaskList\n          preparedTasks={preparedTasks}\n        />\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}